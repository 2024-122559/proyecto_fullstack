{
    "sourceFile": "app/Controllers/FuncionesController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759764720417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759764720417,
            "name": "Commit-0",
            "content": "<?php\r\nnamespace App\\Controllers;\r\nuse App\\Models\\FuncionModel;\r\n\r\nclass FuncionesController extends BaseController\r\n{\r\n    public function listar()\r\n    {\r\n        $funcionModel = new FuncionModel();\r\n        $datos['funciones'] = $funcionModel->findAll();\r\n        return view('funciones/funcionesview', $datos);\r\n    }\r\n\r\n    public function crear()\r\n    {\r\n        return view('funciones/crearfunciones');\r\n    }\r\n\r\n    public function guardar()\r\n    {\r\n        $funcionModel = new FuncionModel();\r\n        $pelicula_id = $this->request->getPost('pelicula_id');\r\n        $sala_id = $this->request->getPost('sala_id');\r\n        $fecha = $this->request->getPost('fecha');\r\n        $hora_inicio = $this->request->getPost('hora_inicio');\r\n\r\n        // Check for duplicate showtime (same movie, room, date, and start time)\r\n        $existe = $funcionModel->where([\r\n            'pelicula_id' => $pelicula_id,\r\n            'sala_id' => $sala_id,\r\n            'fecha' => $fecha,\r\n            'hora_inicio' => $hora_inicio\r\n        ])->first();\r\n\r\n        if ($existe) {\r\n            log_message('debug', 'Showtime duplicado detectado: ' . json_encode([\r\n                'pelicula_id' => $pelicula_id,\r\n                'sala_id' => $sala_id,\r\n                'fecha' => $fecha,\r\n                'hora_inicio' => $hora_inicio\r\n            ]));\r\n            return redirect()->to(base_url('funciones/crear'))\r\n                           ->with('error', 'Ya existe una función con los mismos datos.')\r\n                           ->withInput();\r\n        }\r\n\r\n        $datos = [\r\n            'pelicula_id' => $pelicula_id,\r\n            'sala_id' => $sala_id,\r\n            'fecha' => $fecha,\r\n            'hora_inicio' => $hora_inicio,\r\n            'hora_fin' => $this->request->getPost('hora_fin'),\r\n            'precio_base' => $this->request->getPost('precio_base'),\r\n            'estado' => $this->request->getPost('estado'),\r\n            'fecha_creacion' => date('Y-m-d H:i:s')\r\n        ];\r\n\r\n        try {\r\n            log_message('debug', 'Intentando insertar función: ' . json_encode($datos));\r\n            $funcionModel->insert($datos);\r\n            log_message('debug', 'Función insertada, redirigiendo a funciones/listar');\r\n            return redirect()->to(base_url('funciones/listar'))->with('mensaje', 'agregado');\r\n        } catch (\\Exception $e) {\r\n            log_message('error', 'Error al insertar función: ' . $e->getMessage());\r\n            return redirect()->to(base_url('funciones/crear'))\r\n                           ->with('error', 'Error al guardar la función: ' . $e->getMessage())\r\n                           ->withInput();\r\n        }\r\n    }\r\n\r\n    public function editar($id)\r\n    {\r\n        $funcionModel = new FuncionModel();\r\n        $datos['funcion'] = $funcionModel->find($id);\r\n        if (!$datos['funcion']) {\r\n            return redirect()->to(base_url('funciones/listar'))\r\n                           ->with('error', 'La función no existe.');\r\n        }\r\n        return view('funciones/modificarfunciones', $datos);\r\n    }\r\n\r\n    public function actualizar($id)\r\n    {\r\n        $funcionModel = new FuncionModel();\r\n        $datos = [\r\n            'pelicula_id' => $this->request->getPost('pelicula_id'),\r\n            'sala_id' => $this->request->getPost('sala_id'),\r\n            'fecha' => $this->request->getPost('fecha'),\r\n            'hora_inicio' => $this->request->getPost('hora_inicio'),\r\n            'hora_fin' => $this->request->getPost('hora_fin'),\r\n            'precio_base' => $this->request->getPost('precio_base'),\r\n            'estado' => $this->request->getPost('estado')\r\n        ];\r\n\r\n        try {\r\n            $funcionModel->update($id, $datos);\r\n            return redirect()->to(base_url('funciones/listar'))->with('mensajes', 'Función actualizada correctamente');\r\n        } catch (\\Exception $e) {\r\n            log_message('error', 'Error al actualizar función: ' . $e->getMessage());\r\n            return redirect()->to(base_url('funciones/editar/' . $id))\r\n                           ->with('error', 'Error al actualizar la función: ' . $e->getMessage())\r\n                           ->withInput();\r\n        }\r\n    }\r\n\r\n    public function eliminar($id)\r\n    {\r\n        $funcionModel = new FuncionModel();\r\n        try {\r\n            $funcionModel->delete($id);\r\n            return redirect()->to(base_url('funciones/listar'))->with('mensaje', 'se jue');\r\n        } catch (\\Exception $e) {\r\n            log_message('error', 'Error al eliminar función: ' . $e->getMessage());\r\n            return redirect()->to(base_url('funciones/listar'))\r\n                           ->with('error', 'Error al eliminar la función: ' . $e->getMessage());\r\n        }\r\n    }\r\n}"
        }
    ]
}